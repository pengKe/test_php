<?php
//随机发牌
$card_num=54; //牌数
 	//print_r(wash_card($card_num));
 	 
 	function wash_card($card_num)
	{
 	    $cards=$tmp=array();
 	    for($i=0;$i<$card_num;$i++){
 	        $tmp[$i]=$i;
 	    }
 	 
 	    for($i=0;$i<$card_num;$i++){
 	        $index=rand(0,$card_num-$i-1);
 	        $cards[$i]=$tmp[$index];
 	        unset($tmp[$index]);
 	        $tmp=array_values($tmp);
 	    }
 	    return $cards;
	}
	//使用五种以上方式获取一个文件的扩展名
   $str='dir/upload.image.jpg';
   function get_ext1($file_name){
     return strrchr($file_name, '.');
   }
   function get_ext2($file_name){
      return substr($file_name, strrpos($file_name, '.'));
   }
   function get_ext3($file_name){
      return array_pop(explode('.', $file_name));
   }
   function get_ext4($file_name){
       $p = pathinfo($file_name);
       return $p['extension'];
   }
   function get_ext5($file_name){
        return strrev(substr(strrev($file_name), 0, strpos(strrev($file_name), '.')));
   }
   
   //冒泡排序（数组排序） 
function bubble_sort($array) 
{ 
        $count = count($array); 
        if ($count <= 0) return false; 

        for($i=0; $i<$count; $i++){ 
                for($j=$count-1; $j>$i; $j--){ 
                        if ($array[$j] < $array[$j-1]){ 
                                $tmp = $array[$j]; 
                                $array[$j] = $array[$j-1]; 
                                $array[$j-1] = $tmp; 
                        } 
                } 
        } 
        return $array; 
} 

//快速排序（数组排序） 
function quick_sort($array) { 
        if (count($array) <= 1) return $array; 

        $key = $array[0]; 
        $left_arr = array(); 
        $right_arr = array(); 

        for ($i=1; $i<count($array); $i++){ 
                if ($array[$i] <= $key) 
                        $left_arr[] = $array[$i]; 
                else 
                        $right_arr[] = $array[$i]; 
        } 

        $left_arr = quick_sort($left_arr); 
        $right_arr = quick_sort($right_arr); 

        return array_merge($left_arr, array($key), $right_arr); 
} 




//二分查找（数组里查找某个元素） 
function bin_sch($array, $low, $high, $k){  
    if ($low <= $high){  
        $mid = intval(($low+$high)/2);  
        if ($array[$mid] == $k){  
            return $mid;  
        }elseif ($k < $array[$mid]){  
            return bin_sch($array, $low, $mid-1, $k);  
        }else{  
            return bin_sch($array, $mid+1, $high, $k);  
        }  
    }  
    return -1;  
}  

//顺序查找（数组里查找某个元素） 
function seq_sch($array, $n, $k){  
    $array[$n] = $k;  
    for($i=0; $i<$n; $i++){  
        if($array[$i]==$k){  
            break;  
        }  
    }  
    if ($i<$n){  
        return $i;  
    }else{  
        return -1;  
    }  
}  



//二维数组排序， $arr是数据，$keys是排序的健值，$order是排序规则，1是升序，0是降序
function array_sort($arr, $keys, $order=0) {
if (!is_array($arr)) {
  return false;
}
$keysvalue = array();
foreach($arr as $key => $val) {
  $keysvalue[$key] = $val[$keys];
}
if($order == 0){
  asort($keysvalue);
}else {
  arsort($keysvalue);
}
reset($keysvalue);
foreach($keysvalue as $key => $vals) {
  $keysort[$key] = $key;
}
$new_array = array();
foreach($keysort as $key => $val) {
  $new_array[$key] = $arr[$val];
}
return $new_array;
}
