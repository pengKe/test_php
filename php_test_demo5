<?php
//factory method
class sqlFactory{
      public static function factory($type)
	  {
	     if(include_once 'Drivers/'.$type.'.php'){
		   $classname='DB_Adapter_'.$type;
		   return new $classname;
		 }else{
		   throw new Exception('Driver not found');
	     }
	  }
}
$db=sqlFactory::factory('Mysql');
$db=sqlFactory::factory('SQLite');
//command method
class cook{
  public function meal(){
    echo '番茄炒鸡蛋',PHP_EOL;
  }
  public function drink(){
    echo '紫菜蛋花汤',PHP_EOL; 
  }
  public function ok(){
    echo '完毕',PHP_EOL;
  }
}
interface Command{
  public function execute();
}
class MealCommand implements Command{
  private $cook;
  public function __construct(cook $cook)
  {
    $this->cook=$cook;
  }
  public function execute(){
    $this->cook->meal(); 
  }
}

class DrinkCommand implements Command{
  private $cook;
  public function __construct(cook $cook)
  {
    $this->cook=$cook;
  }
  public function execute(){
    $this->cook->drink(); 
  }
}

class cookControl{
  private $mealcommand;
  private $drinkcommand;
  public function addCommand(Command $mealcommand,Command $drinkcommand){
    $this->mealcommand=$mealcommand;
	$this->drinkcommand=$drinkcommand;
  }
}
public function callmeal(){
  $this->mealcommand->execute();
}
public function calldrink(){
  $this->drinkcommand->execute();
}

interface process{
  public function process()
}
class playerencode implements process{
  public function process(){
    echo "encode\r\n";
  }
}
class playeroutput implements process{
  public function process(){
    echo "output\r\n";
  }
}
class playProcess{
  private $message=null;
  public function __construct(){}
  public function callback(event $event){
      $this->message=$event->click();
	  if($this->message instanceof process)
         $this->message->process();
	  }
}
class mp4{
   public function work(){
     $playProcess=new playProcess();
	 $playProcess->callback(new event('encode'));
	 $playProcess->callback(new event('output'));
   }
}
class event{
   private $m;
   public function __construct($me){
     $this->m=$me;
   }
   public function click(){
      switch($this->m)
	  {
	     case 'encode':
		    return new playerencode();break;
		 case  'output':
           return new playeroutput();break;		 
	  }
   }
}
$mp4=new mp4;
$mp4->work();
